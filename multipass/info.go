package multipass

import (
	"os/exec"
	"strings"
)

// Instance structs holds the name and IPv4 IP address for the deployed instance.
type Instance struct {
	Name string
	IPv4 string
}

// InfoReq has the fields needed as input for the InstanceInfo function.
type InfoReq struct {
	Name string
}

// instanceOutput processes the output generated by the 'multipass info' command to extract the Name, State, IPv4 and Release of that instance and returns a pointer to the instance.
func instanceOutput(stdout string) *Instance {
	var instance Instance
	for _, line := range strings.Split(stdout, "\n") {
		if strings.Contains(line, "Name:") {
			// The combination between TrimSpace and ReplaceAll is used to replace "Name:" with an empty string and to eliminate the spaces,
			// therefore keeping only the value we are interested in
			instance.Name = strings.TrimSpace(strings.ReplaceAll(line, "Name:", ""))
		}
		if strings.Contains(line, "IPv4:") {
			instance.IPv4 = strings.TrimSpace(strings.ReplaceAll(line, "IPv4:", ""))
		}

	}
	return &instance
}

// InstanceInfo returns a pointer to the Instance type or an error if the 'multipass info' command fails.
func InstanceInfo(req *InfoReq) (*Instance, error) {
	infoCmd := "multipass info " + req.Name
	cmdExec := exec.Command("sh", "-c", infoCmd)

	stdout, err := cmdExec.CombinedOutput()
	if err != nil {
		return nil, err
	}
	return instanceOutput(string(stdout)), nil
}
